Building code vocabulary...
('opt.lower: ', False)
('<blank>', '<unk>', '<s>', '</s>')
init Dict
init Dict
Created dictionary of size 50004 (pruned from 393603)
Building comment vocabulary...
('opt.lower: ', False)
('<blank>', '<unk>', '<s>', '</s>')
init Dict
Created dictionary of size 31340 (pruned from 31340)
Preparing train_xe...
Processing dataset/train/train0.60.20.2.code & dataset/train/train0.60.20.2.comment ...
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 13, 44, "\tprint(u'\t\t\t\tgrammar.productions()\t=>', end=u'\t')\n")))
def cfg_demo():
	from nltk import nonterminals, Production, CFG
	(S, NP, VP, PP) = nonterminals(u'S,	NP,	VP,	PP')
	(N, V, P, Det) = nonterminals(u'N,	V,	P,	Det')
	VP_slash_NP = (VP / NP)
	print(u'Some	nonterminals:', [S, NP, VP, PP, N, V, P, Det, (VP / NP)])
	print(u'				S.symbol()	=>', repr(S.symbol()))
	print()
	print(Production(S, [NP]))
	grammar = CFG.fromstring(u"\n						S	->	NP	VP\n						PP	->	P	NP\n						NP	->	Det	N	|	NP	PP\n						VP	->	V	NP	|	VP	PP\n						Det	->	'a'	|	'the'\n						N	->	'dog'	|	'cat'\n						V	->	'chased'	|	'sat'\n						P	->	'on'	|	'in'\n				")
	print(u'A	Grammar:', repr(grammar))
	print(u'				grammar.start()							=>', repr(grammar.start()))
	print(u'				grammar.productions()	=>', end=u'	')
	print(repr(grammar.productions()).replace(u',', (u',\n' + (u'	' * 25))))
	print()
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 12, 31, "\t\t\tprint(('%s' % req.req), end='')\n")))
def peep_port(paths):
	if (not paths):
		print('Please	specify	one	or	more	requirements	files	so	I	have	something	to	port.\n')
		return COMMAND_LINE_ERROR
	for req in chain.from_iterable((_parse_requirements(path, package_finder(argv)) for path in paths)):
		hashes = [hexlify(urlsafe_b64decode((hash + '=').encode('ascii'))).decode('ascii') for hash in hashes_above(*path_and_line(req))]
		if (not hashes):
			print(req.req)
		elif (len(hashes) == 1):
			print(('%s	--hash=sha256:%s' % (req.req, hashes[0])))
		else:
			print(('%s' % req.req), end='')
			for hash in hashes:
				print('	\\')
				print(('				--hash=sha256:%s' % hash), end='')
			print()
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 2, 21, '\tprint(message, file=sys.stderr)\n')))
def die(message):
	print(message, file=sys.stderr)
	sys.exit(1)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 7, 37, "\t\t\tprint('...', filename, seqs, file=sys.stderr)\n")))
def analyze_file(filename):
	bps = 0
	seqs = 0
	input_iter = screed.open(filename)
	for record in input_iter:
		if ((seqs % 100000) == 0):
			print('...', filename, seqs, file=sys.stderr)
		bps += len(record.sequence)
		seqs += 1
	return (bps, seqs)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 2, 41, "\tprint(('\\x1b[31m%s\\x1b[0m' % msg), file=sys.stderr)\n")))
def print_warning(msg):
	print(('\x1b[31m%s\x1b[0m' % msg), file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 17, '\tprint(msg, file=sys.stderr)\n')))
def print_error(msg):
	import sys
	print(msg, file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 6, 63, "\t\t\tprint(('Unable\tto\tcreate\tdirectory\t%s' % PYLINT_HOME), file=sys.stderr)\n")))
def save_results(results, base):
	if (not exists(PYLINT_HOME)):
		try:
			os.mkdir(PYLINT_HOME)
		except OSError:
			print(('Unable	to	create	directory	%s' % PYLINT_HOME), file=sys.stderr)
	data_file = get_pdata_path(base, 1)
	try:
		with open(data_file, _PICK_DUMP) as stream:
			pickle.dump(results, stream)
	except (IOError, OSError) as ex:
		print(('Unable	to	create	file	%s:	%s' % (data_file, ex)), file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 37, "\tprint(('Error:\t%s' % message), file=sys.stderr)\n")))
def fail(message, code=(-1)):
	_deprecated()
	print(('Error:	%s' % message), file=sys.stderr)
	sys.exit(code)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 10, 166, "\t\t\t\tprint('\t'.join(map(str, [package.name, package.timestamp, package.readable_size, urllib.quote(package.source, '/:~'), urllib.quote(package.where, '/:~')])), file=tmp)\n")))
def write_installed_packages_list():
	global installed_packages_list
	try:
		tmp = open(os.path.join(dataset_conf_path, 'installed.lst.2'), 'w')
	except IOError:
		raise RuntimeError('[cf]	fatal:	cannot	create	temp	file')
	else:
		for package in installed_packages_list.values():
			if ((package.where != None) and file_access_rights(os.path.join(package.where, package.name), (os.F_OK | os.R_OK))):
				print('	'.join(map(str, [package.name, package.timestamp, package.readable_size, urllib.quote(package.source, '/:~'), urllib.quote(package.where, '/:~')])), file=tmp)
		atomic_replace(os.path.join(dataset_conf_path, 'installed.lst.2'), os.path.join(dataset_conf_path, 'installed.lst'))
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 7, 34, '\t\tprint(pprint.pformat(arg), file=out)\n')))
def debug(*args):
	try:
		out = ctx.environ['wsgi.errors']
	except:
		out = sys.stderr
	for arg in args:
		print(pprint.pformat(arg), file=out)
	return ''
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 5, 21, '\t\tprint(str(e), file=sys.stderr)\n')))
def get_buildroot():
	try:
		return BuildRoot().path
	except BuildRoot.NotFoundError as e:
		print(str(e), file=sys.stderr)
		sys.exit(1)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 34, "\tprint_counter = (lambda i: (print(('rerun\t%d' % (rerun - i))) if (rerun - i) else None))\n")))
def doctest(*paths, **kwargs):
	subprocess = kwargs.pop('subprocess', True)
	rerun = kwargs.pop('rerun', 0)
	print_counter = (lambda i: (print(('rerun	%d' % (rerun - i))) if (rerun - i) else None))
	if subprocess:
		for i in range(rerun, (-1), (-1)):
			print_counter(i)
			ret = run_in_subprocess_with_hash_randomization('_doctest', function_args=paths, function_kwargs=kwargs)
			if (ret is False):
				break
			val = (not bool(ret))
			if ((not val) or (i == 0)):
				return val
	for i in range(rerun, (-1), (-1)):
		print_counter(i)
		val = (not bool(_doctest(*paths, **kwargs)))
		if ((not val) or (i == 0)):
			return val
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 5, 41, "\t\tprint(u'failed\tto\tfind\tgit\ttags', file=sys.stderr)\n")))
def dirty_version():
	try:
		_version = subprocess.check_output([u'git', u'describe', u'--tags'])
	except Exception:
		print(u'failed	to	find	git	tags', file=sys.stderr)
		return False
	_version = _version.decode(u'ascii')
	try:
		(_, N, sha) = _version.strip().split(u'-')
	except ValueError:
		print(u'failed	to	parse	git	version', file=sys.stderr)
		return False
	sha = sha.strip(u'g')
	replace_version(N)
	_cmd = [u'git', u'show', u'-s', u'--format=%cd', u'--date=local', sha]
	try:
		_date = subprocess.check_output(_cmd)
		_date = _date.decode(u'ascii')
		_date = u'	'.join(_date.split()[1:])
	except:
		_date = u''
		print(u'failed	to	get	commit	date', file=sys.stderr)
	with open(u'xonsh/dev.githash', u'w') as f:
		f.write(u'{}|{}'.format(sha, _date))
	print((u'wrote	git	version:	' + sha), file=sys.stderr)
	return True
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 8, 34, "\tprint(u'Loading\tlibrary...', end=u'\t')\n")))
def demonstrate():
	api = ask_for_credentials()
	if (not api.is_authenticated()):
		print(u"Sorry,	those	credentials	weren't	accepted.")
		return
	print(u'Successfully	logged	in.')
	print()
	print(u'Loading	library...', end=u'	')
	library = api.get_all_songs()
	print(u'done.')
	print(len(library), u'tracks	detected.')
	print()
	first_song = library[0]
	print(u"The	first	song	I	see	is	'{}'	by	'{}'.".format(first_song[u'title'], first_song[u'artist']))
	song_id = first_song[u'id']
	print(u"I'm	going	to	make	a	new	playlist	and	add	that	song	to	it.")
	print(u"I'll	delete	it	when	we're	finished.")
	print()
	playlist_name = input(u'Enter	a	name	for	the	playlist:	')
	playlist_id = api.create_playlist(playlist_name)
	print(u'Made	the	playlist.')
	print()
	api.add_songs_to_playlist(playlist_id, song_id)
	print(u'Added	the	song	to	the	playlist.')
	print()
	input(u'You	can	now	check	on	Google	Music	that	the	playlist	exists.\nWhen	done,	press	enter	to	delete	the	playlist:')
	api.delete_playlist(playlist_id)
	print(u'Deleted	the	playlist.')
	api.logout()
	print(u'All	done!')
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 5, 55, "\t\t\tprint(('%s\t`%s`:\t%s' % (cmd_name, path, msg)), file=stderr)\n")))
def _hadoop_fs_rm(cmd_name, stdout, stderr, environ, path_args, recursive, force):
	failed = []
	def fail(path, msg):
		if mock_hadoop_uses_yarn(environ):
			print(('%s	`%s`:	%s' % (cmd_name, path, msg)), file=stderr)
		else:
			print(('%s:	cannot	remove	%s:	%s.' % (cmd_name, path, msg)), file=stderr)
		failed.append(True)
	for path in path_args:
		real_path = hdfs_uri_to_real_path(path, environ)
		if os.path.isdir(real_path):
			if recursive:
				shutil.rmtree(real_path)
			else:
				fail(path, 'Is	a	directory')
		elif os.path.exists(real_path):
			os.remove(real_path)
		elif (not force):
			fail(path, 'No	such	file	or	directory')
	if failed:
		return (-1)
	else:
		return 0
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 18, 58, "\t\tprint(('Exception\tgetting\tfile\tfrom\tURL:\t%s' % e), file=sys.stderr)\n")))
def url_to_file(url, dest_file):
	try:
		url_reader = urlopen(url)
		CHUNK = (10 * 1024)
		total = 0
		fp = open(dest_file, 'wb')
		while True:
			chunk = url_reader.read(CHUNK)
			if (not chunk):
				break
			fp.write(chunk)
			total += CHUNK
			if (total > MAX_SIZE):
				break
		fp.close()
		return dest_file
	except Exception as e:
		print(('Exception	getting	file	from	URL:	%s' % e), file=sys.stderr)
		return None
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 18, '\tP = partial(print, file=out)\n')))
def cry(out=None, sepchr=u'=', seplen=49):
	import threading
	out = (WhateverIO() if (out is None) else out)
	P = partial(print, file=out)
	tmap = {t.ident: t for t in threading.enumerate()}
	sep = (sepchr * seplen)
	for (tid, frame) in items(sys._current_frames()):
		thread = tmap.get(tid)
		if (not thread):
			continue
		P(u'{0.name}'.format(thread))
		P(sep)
		traceback.print_stack(frame, file=out)
		P(sep)
		P(u'LOCAL	VARIABLES')
		P(sep)
		pprint(frame.f_locals, stream=out)
		P(u'\n')
	return out.getvalue()
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 126, "\t\tprint(u'please\tset\tpython\tenv\tPYTHONIOENCODING=UTF-8,\texample:\texport\tPYTHONIOENCODING=UTF-8,\twhen\twriting\tto\tstdout', file=sys.stderr)\n")))
def execute_from_command_line(argv=None):
	if (sys.stdout.encoding is None):
		print(u'please	set	python	env	PYTHONIOENCODING=UTF-8,	example:	export	PYTHONIOENCODING=UTF-8,	when	writing	to	stdout', file=sys.stderr)
		exit(1)
	command = Command(argv)
	command.execute()
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 12, 30, "\t\t\tprint('SUCCESSFUL:\t', file=sys.stderr)\n")))
def show_summary(successes, failures, reporter=None):
	if reporter:
		reporter.write(('-' * reporter.terminal_width))
		if failures:
			reporter.write('FAILED:\n', 'Red')
			for example in failures:
				reporter.write(('		%s\n' % example))
		else:
			reporter.write('ALL	EXAMPLES	PASSED\n', 'Green')
	else:
		if successes:
			print('SUCCESSFUL:	', file=sys.stderr)
			for example in successes:
				print('		-', example, file=sys.stderr)
		else:
			print('NO	SUCCESSFUL	EXAMPLES', file=sys.stderr)
		if failures:
			print('FAILED:	', file=sys.stderr)
			for example in failures:
				print('		-', example, file=sys.stderr)
		else:
			print('NO	FAILED	EXAMPLES', file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 8, 18, "\t\tprint(node, end=u'\t')\n")))
def root_semrep(syntree, semkey=u'SEM'):
	from nltk.grammar import FeatStructNonterminal
	node = syntree.label()
	assert isinstance(node, FeatStructNonterminal)
	try:
		return node[semkey]
	except KeyError:
		print(node, end=u'	')
		print((u'has	no	specification	for	the	feature	%s' % semkey))
	raise
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 2, 34, "\tprint(((fmt % args) + '\\n'), end='', file=sys.stderr)\n")))
def _trace(fmt, *args):
	print(((fmt % args) + '\n'), end='', file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 10, '\tmap(print, map(format_status, zip(statuses, map(itemgetter(0), jenkins_statuses))))\n')))
def maybe_retry_jobs(statuses, retry_counts, max_retries, jenkins_session):
	jenkins_statuses = map(partial(get_jenkins_info, jenkins_session), statuses)
	map(print, map(format_status, zip(statuses, map(itemgetter(0), jenkins_statuses))))
	candidates = filter((lambda x: (x[1][0] in [JenkinsResults.FAILED, JenkinsResults.NOTRUN])), zip(statuses, jenkins_statuses))
	def exceeded_retries(context):
		return (retry_counts[context] > max_retries)
	retried_too_many = filter((lambda x: exceeded_retries(x[0]['context'])), candidates)
	def format_retried_to_many(job):
		return '{}	retried	{}	times	and	still	failing,	not	retrying.	You	can	look	at	the	build	and	retry	yourself	if	it	is	a	spurious	problem,	and	this	script	will	notice	that	you	have	done	so.'.format(job['target_url'], retry_counts[job['context']])
	map(print, map((lambda x: format_retried_to_many(x[0])), retried_too_many))
	to_retry = filter((lambda x: (x not in retried_too_many)), candidates)
	for job in to_retry:
		retry(jenkins_session, job[0]['target_url'], job[1][1])
		retry_counts[job[0]['context']] += 1
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 76, "\t\tprint('Testing\twhether\tSSAHA2\tis\tinstalled\tand\tcan\tbe\tlaunched\t...\t', end='\t')\n")))
def tests_for_ssaha():
	try:
		print('Testing	whether	SSAHA2	is	installed	and	can	be	launched	...	', end='	')
		sys.stdout.flush()
		fh = open('/dev/null', 'w')
		subprocess.call(['ssaha2'], stdout=fh)
		fh.close()
		print('ok.')
	except:
		print('nope?	Uh	oh	...\n\n')
		raise RuntimeError('Could	not	launch	ssaha2.	Have	you	installed	it?	Is	it	in	your	path?')
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 8, 25, '\t\tprint(definition, file=sys.stderr)\n')))
def head_from_fun(fun, bound=False, debug=False):
	if ((not inspect.isfunction(fun)) and hasattr(fun, u'__call__')):
		(name, fun) = (fun.__class__.__name__, fun.__call__)
	else:
		name = fun.__name__
	definition = FUNHEAD_TEMPLATE.format(fun_name=name, fun_args=_argsfromspec(getfullargspec(fun)), fun_value=1)
	if debug:
		print(definition, file=sys.stderr)
	namespace = {u'__name__': fun.__module__}
	exec definition in namespace
	result = namespace[name]
	result._source = definition
	if bound:
		return partial(result, object())
	return result
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 11, 135, "\t\t\t\t\tprint(('-' * state['indent']), frame.f_code.co_filename.replace(bbbase, ''), frame.f_code.co_name, frame.f_code.co_varnames, file=f)\n")))
def enable_trace(case, trace_exclusions=None, f=sys.stdout):
	if (trace_exclusions is None):
		trace_exclusions = ['twisted', 'worker_transition.py', 'util/tu', 'log.py', '/mq/', '/db/', 'buildbot/data/', 'fake/reactor.py']
	bbbase = os.path.dirname(buildbot.__file__)
	state = {'indent': 0}
	def tracefunc(frame, event, arg):
		if frame.f_code.co_filename.startswith(bbbase):
			if (not any(((te in frame.f_code.co_filename) for te in trace_exclusions))):
				if (event == 'call'):
					state['indent'] += 2
					print(('-' * state['indent']), frame.f_code.co_filename.replace(bbbase, ''), frame.f_code.co_name, frame.f_code.co_varnames, file=f)
				if (event == 'return'):
					state['indent'] -= 2
		return tracefunc
	sys.settrace(tracefunc)
	case.addCleanup(sys.settrace, (lambda _a, _b, _c: None))
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 5, 53, "\t\tprint(('debug_counter\t[%s]:\t%s' % (name, n)), file=sys.stderr)\n")))
def debug_counter(name, every=1):
	setattr(debug_counter, name, (getattr(debug_counter, name, 0) + 1))
	n = getattr(debug_counter, name)
	if ((n % every) == 0):
		print(('debug_counter	[%s]:	%s' % (name, n)), file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 13, '\t\tprint(file=sys.stderr, *args)\n')))
def debug(*args):
	from sympy import SYMPY_DEBUG
	if SYMPY_DEBUG:
		print(file=sys.stderr, *args)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 13, 48, "\t\t\tprint(('-rm:\tIllegal\toption\t%s' % arg), file=stderr)\n")))
def hadoop_fs_rm(stdout, stderr, environ, *args):
	recursive = False
	force = False
	yarn = mock_hadoop_uses_yarn(environ)
	for (i, arg) in enumerate(args):
		if (yarn and (arg in ('-r', '-R'))):
			recursive = True
		elif (yarn and (arg == '-f')):
			force = True
		elif (arg == '-skipTrash'):
			pass
		elif arg.startswith('-'):
			print(('-rm:	Illegal	option	%s' % arg), file=stderr)
			return (-1)
		else:
			path_args = args[i:]
			break
	else:
		if yarn:
			print('-rm:	Not	enough	arguments:	expected	1	but	got	0', file=stderr)
			print('Usage:	hadoop	fs	[generic	options]	-rm	[-f]	[-r|-R]	[-skipTrash]	<src>	...', file=stderr)
		else:
			print('Usage:	java	FsShell	[-rm	[-skipTrash]	<src>]', file=stderr)
		return (-1)
	return _hadoop_fs_rm('rm', stdout, stderr, environ, path_args=path_args, recursive=recursive, force=force)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 20, 49, "\t\t\t\tprint('skipping\tself\tloop', head, tail, file=sys.stderr)\n")))
def roget_graph():
	import gzip
	fh = gzip.open('roget_dat.txt.gz', 'r')
	G = DiGraph()
	for line in fh.readlines():
		line = line.decode()
		if line.startswith('*'):
			continue
		if line.startswith('	'):
			line = (oldline + line)
		if line.endswith('\\\n'):
			oldline = line.strip('\\\n')
			continue
		(headname, tails) = line.split(':')
		numfind = re.compile('^\\d+')
		head = numfind.findall(headname)[0]
		G.add_node(head)
		for tail in tails.split():
			if (head == tail):
				print('skipping	self	loop', head, tail, file=sys.stderr)
			G.add_edge(head, tail)
	return G
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 50, "\t\tprint(u'[file:{0}]'.format(parameters[0]), file=sys.stderr)\n")))
def _fix_file(parameters):
	if parameters[1].verbose:
		print(u'[file:{0}]'.format(parameters[0]), file=sys.stderr)
	try:
		fix_file(*parameters)
	except IOError as error:
		print(unicode(error), file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 8, "\t\t(print('Select\ta\tjoystick\t(L\tto\tlist,\tQ\tto\tquit)'),)\n")))
def select_joystick():
	list_joysticks()
	while True:
		(print('Select	a	joystick	(L	to	list,	Q	to	quit)'),)
		choice = sys.stdin.readline().strip()
		if (choice.lower() == 'l'):
			list_joysticks()
		elif (choice.lower() == 'q'):
			return
		elif choice.isdigit():
			jid = int(choice)
			if (jid not in range(pygame.joystick.get_count())):
				print('Invalid	joystick.')
				continue
			break
		else:
			print('What?')
	return jid
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 2, 51, "\tprint(' DCTB '.join((str(f) for f in args)), file=out_file)\n")))
def print_tab_sep(out_file, *args):
	print(' DCTB '.join((str(f) for f in args)), file=out_file)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 8, 207, "\t\t\tprint((((u'You\tare\trunning\tchardetect\tinteractively.\tPress\t' + u'CTRL-D\ttwice\tat\tthe\tstart\tof\ta\tblank\tline\tto\tsignal\tthe\t') + u'end\tof\tyour\tinput.\tIf\tyou\twant\thelp,\trun\tchardetect\t') + u'--help\\n'), file=sys.stderr)\n")))
def main(argv=None):
	parser = argparse.ArgumentParser(description=u'Takes	one	or	more	file	paths	and	reports	their	detected																						encodings')
	parser.add_argument(u'input', help=u'File	whose	encoding	we	would	like	to	determine.																															(default:	stdin)', type=argparse.FileType(u'rb'), nargs=u'*', default=[(sys.stdin if PY2 else sys.stdin.buffer)])
	parser.add_argument(u'--version', action=u'version', version=u'%(prog)s	{0}'.format(__version__))
	args = parser.parse_args(argv)
	for f in args.input:
		if f.isatty():
			print((((u'You	are	running	chardetect	interactively.	Press	' + u'CTRL-D	twice	at	the	start	of	a	blank	line	to	signal	the	') + u'end	of	your	input.	If	you	want	help,	run	chardetect	') + u'--help\n'), file=sys.stderr)
		print(description_of(f, f.name))
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 2, 20, '\tsay = partial(print, file=file)\n')))
def memdump(samples=10, file=None):
	say = partial(print, file=file)
	if (ps() is None):
		say(u'-	rss:	(psutil	not	installed).')
		return
	(prev, after_collect) = _memdump(samples)
	if prev:
		say(u'-	rss	(sample):')
		for mem in prev:
			say(u'-				>	{0},'.format(mem))
	say(u'-	rss	(end):	{0}.'.format(after_collect))
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 8, 127, "\t\t\tprint(('%s::\tERROR:\tnon-ASCII\tfilename\tnot\tsupported\ton\tthis\tfilesystem\tencoding\t%r,\tskipped.' % (name, fs_encoding)), file=sys.stderr)\n")))
def walk(top, topdown=True, followlinks=False):
	names = os.listdir(top)
	(dirs, nondirs) = ([], [])
	for name in names:
		try:
			fullpath = path.join(top, name)
		except UnicodeError:
			print(('%s::	ERROR:	non-ASCII	filename	not	supported	on	this	filesystem	encoding	%r,	skipped.' % (name, fs_encoding)), file=sys.stderr)
			continue
		if path.isdir(fullpath):
			dirs.append(name)
		else:
			nondirs.append(name)
	if topdown:
		(yield (top, dirs, nondirs))
	for name in dirs:
		fullpath = path.join(top, name)
		if (followlinks or (not path.islink(fullpath))):
			for x in walk(fullpath, topdown, followlinks):
				(yield x)
	if (not topdown):
		(yield (top, dirs, nondirs))
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 13, 56, "\t\t\t\tprint(('%-30s:\t%d' % (filename, status_code)), file=sys.stderr)\n")))
def lint_fileset(filenames, rcfile, description):
	if filenames:
		rc_flag = ('--rcfile=%s' % (rcfile,))
		pylint_shell_command = ['pylint', rc_flag]
		errors = {}
		for filename in filenames:
			cmd = (pylint_shell_command + [filename])
			status_code = subprocess.call(cmd)
			if (status_code != 0):
				errors[filename] = status_code
		if errors:
			for (filename, status_code) in sorted(errors.items()):
				print(('%-30s:	%d' % (filename, status_code)), file=sys.stderr)
			sys.exit(len(errors))
	else:
		print(('Skipping	%s,	no	files	to	lint.' % (description,)))
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 5, 79, "\t\tprint(json.dumps(access(request_token, request_token_secret, verifier)), end='')\n")))
def main(callback_inter=None, callback_final=None):
	if (callback_inter and callback_final):
		(request_token, request_token_secret) = json.loads(callback_inter)
		verifier = urlparse.parse_qs(callback_final)['oauth_verifier']
		print(json.dumps(access(request_token, request_token_secret, verifier)), end='')
	else:
		print(json.dumps(authorize()), end='')
		exit(4)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 61, '\t\tprint("dus:\tDEPRECATED:\tPlease\tuse\t\'du\t-s\'\tinstead.", file=stderr)\n')))
def hadoop_fs_dus(stdout, stderr, environ, *args):
	yarn = mock_hadoop_uses_yarn(environ)
	if yarn:
		print("dus:	DEPRECATED:	Please	use	'du	-s'	instead.", file=stderr)
	return _hadoop_fs_du('dus', stdout, stderr, environ, path_args=args, aggregate=True, pre_yarn_dus_format=(not yarn))
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 5, 64, '\tprint(formatter.format_head(optparser, pkginfo, section), file=stream)\n')))
def generate_manpage(optparser, pkginfo, section=1, stream=sys.stdout, level=0):
	formatter = ManHelpFormatter()
	formatter.output_level = level
	formatter.parser = optparser
	print(formatter.format_head(optparser, pkginfo, section), file=stream)
	print(optparser.format_option_help(formatter), file=stream)
	print(formatter.format_tail(pkginfo), file=stream)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 36, "\t\tprint('Usage:\tjava\tFsShell', file=stderr)\n")))
def hadoop_fs(stdout, stderr, environ, *args):
	if (len(args) < 1):
		print('Usage:	java	FsShell', file=stderr)
		return (-1)
	cmd = args[0][1:]
	cmd_args = args[1:]
	return invoke_cmd(stdout, stderr, environ, 'hadoop_fs_', cmd, cmd_args, ('%s:	Unknown	command\nUsage:	java	FsShell\n' % cmd), (-1))
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 59, '\t\tprint((\'%s\\n%s\' % (section, ("\'" * len(section)))), file=stream)\n')))
def rest_format_section(stream, section, options, encoding=None, doc=None):
	encoding = _get_encoding(encoding, stream)
	if section:
		print(('%s\n%s' % (section, ("'" * len(section)))), file=stream)
	if doc:
		print(_encode(normalize_text(doc, line_len=79, indent=''), encoding), file=stream)
		print(file=stream)
	for (optname, optdict, value) in options:
		help = optdict.get('help')
		print((':%s:' % optname), file=stream)
		if help:
			help = normalize_text(help, line_len=79, indent='		')
			print(_encode(help, encoding), file=stream)
		if value:
			value = _encode(format_option_value(optdict, value), encoding)
			print(file=stream)
			print(('		Default:	``%s``' % value.replace('``	', '````	``')), file=stream)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 7, 37, "\t\t\tprint(('fetching\t%s' % url), file=sys.stderr)\n")))
def get_paged_request(url, headers=None, **params):
	results = []
	params.setdefault('per_page', 100)
	while True:
		if ('?' in url):
			params = None
			print(('fetching	%s' % url), file=sys.stderr)
		else:
			print(('fetching	%s	with	%s' % (url, params)), file=sys.stderr)
		response = requests.get(url, headers=headers, params=params)
		response.raise_for_status()
		results.extend(response.json())
		if ('next' in response.links):
			url = response.links['next']['url']
		else:
			break
	return results
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 34, "\tprint_counter = (lambda i: (print(('rerun\t%d' % (rerun - i))) if (rerun - i) else None))\n")))
def test(*paths, **kwargs):
	subprocess = kwargs.pop('subprocess', True)
	rerun = kwargs.pop('rerun', 0)
	print_counter = (lambda i: (print(('rerun	%d' % (rerun - i))) if (rerun - i) else None))
	if subprocess:
		for i in range(rerun, (-1), (-1)):
			print_counter(i)
			ret = run_in_subprocess_with_hash_randomization('_test', function_args=paths, function_kwargs=kwargs)
			if (ret is False):
				break
			val = (not bool(ret))
			if ((not val) or (i == 0)):
				return val
	for i in range(rerun, (-1), (-1)):
		print_counter(i)
		val = (not bool(_test(*paths, **kwargs)))
		if ((not val) or (i == 0)):
			return val
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 16, 19, '\t\t\tprint(msg, file=sys.stderr)\n')))
def get_modules():
	parser = get_parser()
	args = parser.parse_args()
	if (args.packages is ALL_MODULES):
		result = list(MODULES)
	else:
		result = []
		invalid = []
		for package in args.packages:
			if (package in MODULES):
				result.append(package)
			else:
				invalid.append(package)
		if invalid:
			msg = ('No	system	test	for	packages:	' + ',	'.join(invalid))
			print(msg, file=sys.stderr)
			sys.exit(1)
	return result
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 12, 18, '\t\tprint(tok, file=infile)\n')))
def add_access_token(creds_file=None):
	if (creds_file is None):
		path = os.path.dirname(__file__)
		creds_file = os.path.join(path, 'credentials2.txt')
	oauth2 = credsfromfile(creds_file=creds_file)
	app_key = oauth2['app_key']
	app_secret = oauth2['app_secret']
	twitter = Twython(app_key, app_secret, oauth_version=2)
	access_token = twitter.obtain_access_token()
	tok = 'access_token={}\n'.format(access_token)
	with open(creds_file, 'a') as infile:
		print(tok, file=infile)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 49, "\t\tprint('Usage:\tjava\tFsShell\t[-cat\t<src>]', file=stderr)\n")))
def hadoop_fs_cat(stdout, stderr, environ, *args):
	if (len(args) < 1):
		print('Usage:	java	FsShell	[-cat	<src>]', file=stderr)
		return (-1)
	failed = False
	for hdfs_uri_glob in args:
		real_path_glob = hdfs_uri_to_real_path(hdfs_uri_glob, environ)
		paths = glob.glob(real_path_glob)
		if (not paths):
			print(('cat:	File	does	not	exist:	%s' % hdfs_uri_glob), file=stderr)
			failed = True
		else:
			for path in paths:
				with open(path, 'rb') as f:
					stdout_buffer = getattr(stdout, 'buffer', stdout)
					for line in f:
						stdout_buffer.write(line)
	if failed:
		return (-1)
	else:
		return 0
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 10, 47, "\t\tprint('{}\t'.format(tweet['created_at']), end='')\n")))
@verbose
def limit_by_time_demo(keywords='nltk'):
	date = yesterday()
	dt_date = datetime.datetime(*date)
	oauth = credsfromfile()
	client = Query(**oauth)
	client.register(TweetViewer(limit=100, lower_date_limit=date))
	print('Cutoff	date:	{}\n'.format(dt_date))
	for tweet in client.search_tweets(keywords=keywords):
		print('{}	'.format(tweet['created_at']), end='')
		client.handler.handle(tweet)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 12, 63, "\t\tprint(('Error\tsaving\tautojump\tdata\t(disk\tfull?)' % ex), file=sys.stderr)\n")))
def save(config, data):
	create_dir(os.path.dirname(config['data_path']))
	try:
		temp = NamedTemporaryFile(delete=False)
		temp.close()
		with open(temp.name, 'w', encoding='utf-8', errors='replace') as f:
			for (path, weight) in data.items():
				f.write(unico(('%s DCTB %s\n' % (weight, path))))
			f.flush()
			os.fsync(f)
	except IOError as ex:
		print(('Error	saving	autojump	data	(disk	full?)' % ex), file=sys.stderr)
		sys.exit(1)
	move_file(temp.name, config['data_path'])
	if ((not os.path.exists(config['backup_path'])) or ((time() - os.path.getmtime(config['backup_path'])) > BACKUP_THRESHOLD)):
		shutil.copy(config['data_path'], config['backup_path'])
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 8, 56, '\t\tprint(msg.format(pip.__version__, _PIP_VERSION), file=sys.stderr)\n')))
def _uninstall_helper(verbosity=0):
	try:
		import pip
	except ImportError:
		return
	if (pip.__version__ != _PIP_VERSION):
		msg = 'ensurepip	will	only	uninstall	a	matching	version	({!r}	installed,	{!r}	bundled)'
		print(msg.format(pip.__version__, _PIP_VERSION), file=sys.stderr)
		return
	_require_ssl_for_pip()
	_disable_pip_configuration_settings()
	args = ['uninstall', '-y', '--disable-pip-version-check']
	if verbosity:
		args += [('-' + ('v' * verbosity))]
	_run_pip((args + [p[0] for p in reversed(_PROJECTS)]))
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 6, 95, "\t\t\tprint(((u'ERROR:\tFile\t%s\tdoes\tnot\thave\twrite\t' % file_path) + u'permission;\texiting'), file=sys.stderr)\n")))
def check_file_writable(file_path):
	try:
		file_obj = open(file_path, u'a')
	except IOError as error:
		if (error.errno == errno.EACCES):
			print(((u'ERROR:	File	%s	does	not	have	write	' % file_path) + u'permission;	exiting'), file=sys.stderr)
			sys.exit(1)
		else:
			print((u'ERROR:	' + error.strerror), file=sys.stderr)
	else:
		file_obj.close()
		return
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 17, 62, "\t\t\tprint((((pkg_name + '==') + pkg_version) + delimiter), end=endline)\n")))
def main():
	parser = argparse.ArgumentParser(description='PyPI	Current	Package	Version	Checker', epilog='Licensed	"Apache	2.0"')
	parser.add_argument('-f', '--format', choices=['requirements', 'bare'], default='requirements', help='<Optional>	Output	format', required=False)
	parser.add_argument('-l', '--layout', choices=['vertical', 'horizontal'], default='vertical', help='<Optional>	Output	layout', required=False)
	parser.add_argument('-p', '--packages', nargs='+', help='<Required>	Space-delimited	list	of	packages', required=True)
	args = parser.parse_args()
	pypi = xmlrpclib.ServerProxy('https://pypi.python.org/pypi')
	if (args.layout == 'vertical'):
		delimiter = ''
		endline = '\n'
	else:
		delimiter = '	'
		endline = ''
	for pkg_name in args.packages:
		pkg_version = get_package_version(pypi, pkg_name)
		if (args.format == 'requirements'):
			print((((pkg_name + '==') + pkg_version) + delimiter), end=endline)
		else:
			print((pkg_version + delimiter), end=endline)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 21, '\tprint(message, file=sys.stderr)\n')))
def log_warn(message, **kwargs):
	if kwargs:
		message = message.format(**kwargs)
	print(message, file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 61, '\t\tprint("lsr:\tDEPRECATED:\tPlease\tuse\t\'ls\t-R\'\tinstead.", file=stderr)\n')))
def hadoop_fs_lsr(stdout, stderr, environ, *args):
	if mock_hadoop_uses_yarn(environ):
		print("lsr:	DEPRECATED:	Please	use	'ls	-R'	instead.", file=stderr)
	return _hadoop_fs_ls('lsr', stdout, stderr, environ, path_args=args, recursive=True)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 126, "\t\tprint(('Warning:\tusing\tseed\tgiven\tby\tconfig.unittests.rseed=%iinstead\tof\tseed\t%i\tgiven\tas\tparameter' % (seed, pseed)), file=sys.stderr)\n")))
def seed_rng(pseed=None):
	seed = fetch_seed(pseed)
	if (pseed and (pseed != seed)):
		print(('Warning:	using	seed	given	by	config.unittests.rseed=%iinstead	of	seed	%i	given	as	parameter' % (seed, pseed)), file=sys.stderr)
	numpy.random.seed(seed)
	return seed
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 2, 48, '\tprint(colored(text, color, on_color, attrs), **kwargs)\n')))
def cprint(text, color=None, on_color=None, attrs=None, **kwargs):
	print(colored(text, color, on_color, attrs), **kwargs)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 8, 65, "\t\tprint('Need\tan\targument,\teither\t--list\tor\t--host\t<host>', file=sys.stderr)\n")))
def main(argv):
	result = build_dict()
	if ((len(argv) == 2) and (argv[1] == '--list')):
		json.dump(result, sys.stdout)
	elif ((len(argv) == 3) and (argv[1] == '--host')):
		json.dump({'ansible_connection': 'lxc'}, sys.stdout)
	else:
		print('Need	an	argument,	either	--list	or	--host	<host>', file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 35, "\tprint('Creating\tinstances:\t', end='')\n")))
def create_client_instances(targetlist):
	instances = []
	print('Creating	instances:	', end='')
	for target in targetlist:
		if (target['virt'] == 'hvm'):
			machine_type = ('t2.medium' if cl_args.fast else 't2.micro')
		else:
			machine_type = ('c1.medium' if cl_args.fast else 't1.micro')
		if ('userdata' in target.keys()):
			userdata = target['userdata']
		else:
			userdata = ''
		name = ('le-%s' % target['name'])
		print(name, end='	')
		instances.append(make_instance(name, target['ami'], KEYNAME, machine_type=machine_type, userdata=userdata))
	print()
	return instances
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 7, 66, "\t\tprint('ImportError\t-\t{0}\t(Reason:\t{1})'.format(full, exc), file=sys.stderr)\n")))
def mod_data(opts, full):
	ret = {}
	finder = modulefinder.ModuleFinder()
	try:
		finder.load_file(full)
	except ImportError as exc:
		print('ImportError	-	{0}	(Reason:	{1})'.format(full, exc), file=sys.stderr)
		return ret
	for (name, mod) in finder.modules.items():
		basemod = name.split('.')[0]
		if (basemod in ret):
			continue
		if basemod.startswith('_'):
			continue
		if (not mod.__file__):
			continue
		if (opts['bif'] not in mod.__file__):
			continue
		if (name == os.path.basename(mod.__file__)[:(-3)]):
			continue
		ret[basemod] = mod.__file__
	for (name, err) in finder.badmodules.items():
		basemod = name.split('.')[0]
		if (basemod in ret):
			continue
		if basemod.startswith('_'):
			continue
		ret[basemod] = err
	return ret
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', ValueError("Expected token NAME:None, got OP:'.' on line 15 col 37",))
def regress_poly(degree, data, remove_mean=True, axis=(-1)):
	IFLOG.debug((u'Performing	polynomial	regression	on	data	of	shape	' + str(data.shape)))
	datashape = data.shape
	timepoints = datashape[axis]
	data = data.reshape(((-1), timepoints))
	X = np.ones((timepoints, 1))
	for i in range(degree):
		polynomial_func = Legendre.basis((i + 1))
		value_array = np.linspace((-1), 1, timepoints)
		X = np.hstack((X, polynomial_func(value_array)[:, np.newaxis]))
	betas = np.linalg.pinv(X).dot(data.T)
	if remove_mean:
		datahat = X.dot(betas).T
	else:
		datahat = X[:, 1:].dot(betas[1:, ...]).T
	regressed_data = (data - datahat)
	return regressed_data.reshape(datashape)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 25, 53, "\t\tprint('Error\trunning\tprocess\t{}'.format(err), file=sys.stderr)\n")))
def run_multi_processes(cmd_list, out_log=None, err_log=None):
	kwargs = {'shell': True, 'cwd': None}
	pids = []
	if out_log:
		out_log_file = open(out_log, 'w')
		kwargs['stdout'] = out_log_file
	if err_log:
		err_log_file = open(err_log, 'w')
		kwargs['stderr'] = err_log_file
	if tasks.environment.dry_run:
		for cmd in cmd_list:
			tasks.environment.info(cmd)
		return
	try:
		for cmd in cmd_list:
			pids.extend([subprocess.Popen(cmd, **kwargs)])
		def _signal_handler(*args):
			'\n												What	to	do	when	process	is	ended\n												'
			print('\nEnding...')
		signal.signal(signal.SIGINT, _signal_handler)
		print('Enter	CTL-C	to	end')
		signal.pause()
		print('Processes	ending')
	except Exception as err:
		print('Error	running	process	{}'.format(err), file=sys.stderr)
	finally:
		for pid in pids:
			kill_process(pid)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 1, 12, '@lower(print, types.VarArg(types.Any))\n')))
@lower(print, types.VarArg(types.Any))
def print_varargs(context, builder, sig, args):
	vprint = nvvmutils.declare_vprint(builder.module)
	formats = []
	values = []
	for (i, (argtype, argval)) in enumerate(zip(sig.args, args)):
		(argfmt, argvals) = print_item(argtype, context, builder, argval)
		formats.append(argfmt)
		values.extend(argvals)
	rawfmt = ('	'.join(formats) + '\n')
	fmt = context.insert_string_const_addrspace(builder, rawfmt)
	array = cgutils.make_anonymous_struct(builder, values)
	arrayptr = cgutils.alloca_once_value(builder, array)
	vprint = nvvmutils.declare_vprint(builder.module)
	builder.call(vprint, (fmt, builder.bitcast(arrayptr, voidptr)))
	return context.get_dummy_value()
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 8, 59, "\t\tprint('Usage:\thadoop\t[--config\tconfdir]\tCOMMAND\\n', file=stderr)\n")))
def main(stdin, stdout, stderr, argv, environ):
	cmd_log_path = os.path.join(get_mock_dir(environ=environ), 'cmd.log')
	with open(cmd_log_path, 'a') as cmd_log:
		cmd_log.write('	'.join((pipes.quote(arg) for arg in argv[1:])))
		cmd_log.write('\n')
		cmd_log.flush()
	if (len(argv) < 2):
		print('Usage:	hadoop	[--config	confdir]	COMMAND\n', file=stderr)
		return 1
	cmd = argv[1]
	cmd_args = argv[2:]
	return invoke_cmd(stdout, stderr, environ, 'hadoop_', cmd, cmd_args, ('Could	not	find	the	main	class:	%s.		Program	will	exit.\n\n' % cmd), 1)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 2, 123, "\tprint(('\\r[dl]\t%6.2f%%\t%s' % (((min(totalsize, (blocks * blocksize)) * 100.0) / totalsize), hook_download_filename)), end='')\n")))
def progress_bar(blocks, blocksize, totalsize):
	print(('\r[dl]	%6.2f%%	%s' % (((min(totalsize, (blocks * blocksize)) * 100.0) / totalsize), hook_download_filename)), end='')
	sys.stdout.flush()
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 83, "\t\tprint('Searching\tlinker\tsequences\twith\tSSAHA2\t(this\tmay\ttake\ta\twhile)\t...\t', end='\t')\n")))
def launch_ssaha(linker_fname, query_fname, output_fh):
	tests_for_ssaha()
	try:
		print('Searching	linker	sequences	with	SSAHA2	(this	may	take	a	while)	...	', end='	')
		sys.stdout.flush()
		retcode = subprocess.call(['ssaha2', '-output', 'ssaha2', '-solexa', '-kmer', '4', '-skip', '1', linker_fname, query_fname], stdout=output_fh)
		if retcode:
			raise RuntimeError('Ups.')
		else:
			print('ok.')
	except:
		print('\n')
		raise RuntimeError('An	error	occured	during	the	SSAHA2	execution,	aborting.')
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 24, '\t\tprint(ERROR_MSG, file=sys.stderr)\n')))
def main():
	if (TAG_ENV not in os.environ):
		print(ERROR_MSG, file=sys.stderr)
		sys.exit(1)
	tag_name = os.environ[TAG_ENV]
	match = TAG_RE.match(tag_name)
	if (match is None):
		print((BAD_TAG_MSG % (tag_name,)), file=sys.stderr)
		sys.exit(1)
	pkg_name = match.group('pkg')
	if (pkg_name is None):
		print(ROOT_DIR)
	else:
		pkg_dir = pkg_name.rstrip('-').replace('-', '_')
		print(os.path.join(ROOT_DIR, pkg_dir))
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 10, 19, '\t\t\tprint(out, file=fobj)\n')))
def gen_lower_listing(path=None):
	cpu_backend = cpu_target.target_context
	cpu_backend.refresh()
	fninfos = gather_function_info(cpu_backend)
	out = format_function_infos(fninfos)
	if (path is None):
		print(out)
	else:
		with open(path, 'w') as fobj:
			print(out, file=fobj)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 2, 24, "\tprint(s.ljust(20), end='\t')\n")))
def timefunc(correct, s, func, *args, **kwargs):
	print(s.ljust(20), end='	')
	res = func(*args, **kwargs)
	if (correct is not None):
		assert np.allclose(res, correct), (res, correct)
	print('{:>5.0f}	ms'.format((min(repeat((lambda : func(*args, **kwargs)), number=5, repeat=2)) * 1000)))
	return res
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
WARNING: src and tgt do not have the same # of sentences
Prepared 55576 sentences (9593 ignored due to length == 0 or src len > 100 or tgt len > 50)
Prepared 55576 sentences (67 ignored due to Exception)
Preparing train_pg...
Processing dataset/train/train0.60.20.2.code & dataset/train/train0.60.20.2.comment ...
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 13, 44, "\tprint(u'\t\t\t\tgrammar.productions()\t=>', end=u'\t')\n")))
def cfg_demo():
	from nltk import nonterminals, Production, CFG
	(S, NP, VP, PP) = nonterminals(u'S,	NP,	VP,	PP')
	(N, V, P, Det) = nonterminals(u'N,	V,	P,	Det')
	VP_slash_NP = (VP / NP)
	print(u'Some	nonterminals:', [S, NP, VP, PP, N, V, P, Det, (VP / NP)])
	print(u'				S.symbol()	=>', repr(S.symbol()))
	print()
	print(Production(S, [NP]))
	grammar = CFG.fromstring(u"\n						S	->	NP	VP\n						PP	->	P	NP\n						NP	->	Det	N	|	NP	PP\n						VP	->	V	NP	|	VP	PP\n						Det	->	'a'	|	'the'\n						N	->	'dog'	|	'cat'\n						V	->	'chased'	|	'sat'\n						P	->	'on'	|	'in'\n				")
	print(u'A	Grammar:', repr(grammar))
	print(u'				grammar.start()							=>', repr(grammar.start()))
	print(u'				grammar.productions()	=>', end=u'	')
	print(repr(grammar.productions()).replace(u',', (u',\n' + (u'	' * 25))))
	print()
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 12, 31, "\t\t\tprint(('%s' % req.req), end='')\n")))
def peep_port(paths):
	if (not paths):
		print('Please	specify	one	or	more	requirements	files	so	I	have	something	to	port.\n')
		return COMMAND_LINE_ERROR
	for req in chain.from_iterable((_parse_requirements(path, package_finder(argv)) for path in paths)):
		hashes = [hexlify(urlsafe_b64decode((hash + '=').encode('ascii'))).decode('ascii') for hash in hashes_above(*path_and_line(req))]
		if (not hashes):
			print(req.req)
		elif (len(hashes) == 1):
			print(('%s	--hash=sha256:%s' % (req.req, hashes[0])))
		else:
			print(('%s' % req.req), end='')
			for hash in hashes:
				print('	\\')
				print(('				--hash=sha256:%s' % hash), end='')
			print()
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 2, 21, '\tprint(message, file=sys.stderr)\n')))
def die(message):
	print(message, file=sys.stderr)
	sys.exit(1)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 7, 37, "\t\t\tprint('...', filename, seqs, file=sys.stderr)\n")))
def analyze_file(filename):
	bps = 0
	seqs = 0
	input_iter = screed.open(filename)
	for record in input_iter:
		if ((seqs % 100000) == 0):
			print('...', filename, seqs, file=sys.stderr)
		bps += len(record.sequence)
		seqs += 1
	return (bps, seqs)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 2, 41, "\tprint(('\\x1b[31m%s\\x1b[0m' % msg), file=sys.stderr)\n")))
def print_warning(msg):
	print(('\x1b[31m%s\x1b[0m' % msg), file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 17, '\tprint(msg, file=sys.stderr)\n')))
def print_error(msg):
	import sys
	print(msg, file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 6, 63, "\t\t\tprint(('Unable\tto\tcreate\tdirectory\t%s' % PYLINT_HOME), file=sys.stderr)\n")))
def save_results(results, base):
	if (not exists(PYLINT_HOME)):
		try:
			os.mkdir(PYLINT_HOME)
		except OSError:
			print(('Unable	to	create	directory	%s' % PYLINT_HOME), file=sys.stderr)
	data_file = get_pdata_path(base, 1)
	try:
		with open(data_file, _PICK_DUMP) as stream:
			pickle.dump(results, stream)
	except (IOError, OSError) as ex:
		print(('Unable	to	create	file	%s:	%s' % (data_file, ex)), file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 37, "\tprint(('Error:\t%s' % message), file=sys.stderr)\n")))
def fail(message, code=(-1)):
	_deprecated()
	print(('Error:	%s' % message), file=sys.stderr)
	sys.exit(code)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 10, 166, "\t\t\t\tprint('\t'.join(map(str, [package.name, package.timestamp, package.readable_size, urllib.quote(package.source, '/:~'), urllib.quote(package.where, '/:~')])), file=tmp)\n")))
def write_installed_packages_list():
	global installed_packages_list
	try:
		tmp = open(os.path.join(dataset_conf_path, 'installed.lst.2'), 'w')
	except IOError:
		raise RuntimeError('[cf]	fatal:	cannot	create	temp	file')
	else:
		for package in installed_packages_list.values():
			if ((package.where != None) and file_access_rights(os.path.join(package.where, package.name), (os.F_OK | os.R_OK))):
				print('	'.join(map(str, [package.name, package.timestamp, package.readable_size, urllib.quote(package.source, '/:~'), urllib.quote(package.where, '/:~')])), file=tmp)
		atomic_replace(os.path.join(dataset_conf_path, 'installed.lst.2'), os.path.join(dataset_conf_path, 'installed.lst'))
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 7, 34, '\t\tprint(pprint.pformat(arg), file=out)\n')))
def debug(*args):
	try:
		out = ctx.environ['wsgi.errors']
	except:
		out = sys.stderr
	for arg in args:
		print(pprint.pformat(arg), file=out)
	return ''
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 5, 21, '\t\tprint(str(e), file=sys.stderr)\n')))
def get_buildroot():
	try:
		return BuildRoot().path
	except BuildRoot.NotFoundError as e:
		print(str(e), file=sys.stderr)
		sys.exit(1)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 34, "\tprint_counter = (lambda i: (print(('rerun\t%d' % (rerun - i))) if (rerun - i) else None))\n")))
def doctest(*paths, **kwargs):
	subprocess = kwargs.pop('subprocess', True)
	rerun = kwargs.pop('rerun', 0)
	print_counter = (lambda i: (print(('rerun	%d' % (rerun - i))) if (rerun - i) else None))
	if subprocess:
		for i in range(rerun, (-1), (-1)):
			print_counter(i)
			ret = run_in_subprocess_with_hash_randomization('_doctest', function_args=paths, function_kwargs=kwargs)
			if (ret is False):
				break
			val = (not bool(ret))
			if ((not val) or (i == 0)):
				return val
	for i in range(rerun, (-1), (-1)):
		print_counter(i)
		val = (not bool(_doctest(*paths, **kwargs)))
		if ((not val) or (i == 0)):
			return val
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 5, 41, "\t\tprint(u'failed\tto\tfind\tgit\ttags', file=sys.stderr)\n")))
def dirty_version():
	try:
		_version = subprocess.check_output([u'git', u'describe', u'--tags'])
	except Exception:
		print(u'failed	to	find	git	tags', file=sys.stderr)
		return False
	_version = _version.decode(u'ascii')
	try:
		(_, N, sha) = _version.strip().split(u'-')
	except ValueError:
		print(u'failed	to	parse	git	version', file=sys.stderr)
		return False
	sha = sha.strip(u'g')
	replace_version(N)
	_cmd = [u'git', u'show', u'-s', u'--format=%cd', u'--date=local', sha]
	try:
		_date = subprocess.check_output(_cmd)
		_date = _date.decode(u'ascii')
		_date = u'	'.join(_date.split()[1:])
	except:
		_date = u''
		print(u'failed	to	get	commit	date', file=sys.stderr)
	with open(u'xonsh/dev.githash', u'w') as f:
		f.write(u'{}|{}'.format(sha, _date))
	print((u'wrote	git	version:	' + sha), file=sys.stderr)
	return True
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 8, 34, "\tprint(u'Loading\tlibrary...', end=u'\t')\n")))
def demonstrate():
	api = ask_for_credentials()
	if (not api.is_authenticated()):
		print(u"Sorry,	those	credentials	weren't	accepted.")
		return
	print(u'Successfully	logged	in.')
	print()
	print(u'Loading	library...', end=u'	')
	library = api.get_all_songs()
	print(u'done.')
	print(len(library), u'tracks	detected.')
	print()
	first_song = library[0]
	print(u"The	first	song	I	see	is	'{}'	by	'{}'.".format(first_song[u'title'], first_song[u'artist']))
	song_id = first_song[u'id']
	print(u"I'm	going	to	make	a	new	playlist	and	add	that	song	to	it.")
	print(u"I'll	delete	it	when	we're	finished.")
	print()
	playlist_name = input(u'Enter	a	name	for	the	playlist:	')
	playlist_id = api.create_playlist(playlist_name)
	print(u'Made	the	playlist.')
	print()
	api.add_songs_to_playlist(playlist_id, song_id)
	print(u'Added	the	song	to	the	playlist.')
	print()
	input(u'You	can	now	check	on	Google	Music	that	the	playlist	exists.\nWhen	done,	press	enter	to	delete	the	playlist:')
	api.delete_playlist(playlist_id)
	print(u'Deleted	the	playlist.')
	api.logout()
	print(u'All	done!')
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 5, 55, "\t\t\tprint(('%s\t`%s`:\t%s' % (cmd_name, path, msg)), file=stderr)\n")))
def _hadoop_fs_rm(cmd_name, stdout, stderr, environ, path_args, recursive, force):
	failed = []
	def fail(path, msg):
		if mock_hadoop_uses_yarn(environ):
			print(('%s	`%s`:	%s' % (cmd_name, path, msg)), file=stderr)
		else:
			print(('%s:	cannot	remove	%s:	%s.' % (cmd_name, path, msg)), file=stderr)
		failed.append(True)
	for path in path_args:
		real_path = hdfs_uri_to_real_path(path, environ)
		if os.path.isdir(real_path):
			if recursive:
				shutil.rmtree(real_path)
			else:
				fail(path, 'Is	a	directory')
		elif os.path.exists(real_path):
			os.remove(real_path)
		elif (not force):
			fail(path, 'No	such	file	or	directory')
	if failed:
		return (-1)
	else:
		return 0
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 18, 58, "\t\tprint(('Exception\tgetting\tfile\tfrom\tURL:\t%s' % e), file=sys.stderr)\n")))
def url_to_file(url, dest_file):
	try:
		url_reader = urlopen(url)
		CHUNK = (10 * 1024)
		total = 0
		fp = open(dest_file, 'wb')
		while True:
			chunk = url_reader.read(CHUNK)
			if (not chunk):
				break
			fp.write(chunk)
			total += CHUNK
			if (total > MAX_SIZE):
				break
		fp.close()
		return dest_file
	except Exception as e:
		print(('Exception	getting	file	from	URL:	%s' % e), file=sys.stderr)
		return None
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 18, '\tP = partial(print, file=out)\n')))
def cry(out=None, sepchr=u'=', seplen=49):
	import threading
	out = (WhateverIO() if (out is None) else out)
	P = partial(print, file=out)
	tmap = {t.ident: t for t in threading.enumerate()}
	sep = (sepchr * seplen)
	for (tid, frame) in items(sys._current_frames()):
		thread = tmap.get(tid)
		if (not thread):
			continue
		P(u'{0.name}'.format(thread))
		P(sep)
		traceback.print_stack(frame, file=out)
		P(sep)
		P(u'LOCAL	VARIABLES')
		P(sep)
		pprint(frame.f_locals, stream=out)
		P(u'\n')
	return out.getvalue()
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 126, "\t\tprint(u'please\tset\tpython\tenv\tPYTHONIOENCODING=UTF-8,\texample:\texport\tPYTHONIOENCODING=UTF-8,\twhen\twriting\tto\tstdout', file=sys.stderr)\n")))
def execute_from_command_line(argv=None):
	if (sys.stdout.encoding is None):
		print(u'please	set	python	env	PYTHONIOENCODING=UTF-8,	example:	export	PYTHONIOENCODING=UTF-8,	when	writing	to	stdout', file=sys.stderr)
		exit(1)
	command = Command(argv)
	command.execute()
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 12, 30, "\t\t\tprint('SUCCESSFUL:\t', file=sys.stderr)\n")))
def show_summary(successes, failures, reporter=None):
	if reporter:
		reporter.write(('-' * reporter.terminal_width))
		if failures:
			reporter.write('FAILED:\n', 'Red')
			for example in failures:
				reporter.write(('		%s\n' % example))
		else:
			reporter.write('ALL	EXAMPLES	PASSED\n', 'Green')
	else:
		if successes:
			print('SUCCESSFUL:	', file=sys.stderr)
			for example in successes:
				print('		-', example, file=sys.stderr)
		else:
			print('NO	SUCCESSFUL	EXAMPLES', file=sys.stderr)
		if failures:
			print('FAILED:	', file=sys.stderr)
			for example in failures:
				print('		-', example, file=sys.stderr)
		else:
			print('NO	FAILED	EXAMPLES', file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 8, 18, "\t\tprint(node, end=u'\t')\n")))
def root_semrep(syntree, semkey=u'SEM'):
	from nltk.grammar import FeatStructNonterminal
	node = syntree.label()
	assert isinstance(node, FeatStructNonterminal)
	try:
		return node[semkey]
	except KeyError:
		print(node, end=u'	')
		print((u'has	no	specification	for	the	feature	%s' % semkey))
	raise
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 2, 34, "\tprint(((fmt % args) + '\\n'), end='', file=sys.stderr)\n")))
def _trace(fmt, *args):
	print(((fmt % args) + '\n'), end='', file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 10, '\tmap(print, map(format_status, zip(statuses, map(itemgetter(0), jenkins_statuses))))\n')))
def maybe_retry_jobs(statuses, retry_counts, max_retries, jenkins_session):
	jenkins_statuses = map(partial(get_jenkins_info, jenkins_session), statuses)
	map(print, map(format_status, zip(statuses, map(itemgetter(0), jenkins_statuses))))
	candidates = filter((lambda x: (x[1][0] in [JenkinsResults.FAILED, JenkinsResults.NOTRUN])), zip(statuses, jenkins_statuses))
	def exceeded_retries(context):
		return (retry_counts[context] > max_retries)
	retried_too_many = filter((lambda x: exceeded_retries(x[0]['context'])), candidates)
	def format_retried_to_many(job):
		return '{}	retried	{}	times	and	still	failing,	not	retrying.	You	can	look	at	the	build	and	retry	yourself	if	it	is	a	spurious	problem,	and	this	script	will	notice	that	you	have	done	so.'.format(job['target_url'], retry_counts[job['context']])
	map(print, map((lambda x: format_retried_to_many(x[0])), retried_too_many))
	to_retry = filter((lambda x: (x not in retried_too_many)), candidates)
	for job in to_retry:
		retry(jenkins_session, job[0]['target_url'], job[1][1])
		retry_counts[job[0]['context']] += 1
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 3, 76, "\t\tprint('Testing\twhether\tSSAHA2\tis\tinstalled\tand\tcan\tbe\tlaunched\t...\t', end='\t')\n")))
def tests_for_ssaha():
	try:
		print('Testing	whether	SSAHA2	is	installed	and	can	be	launched	...	', end='	')
		sys.stdout.flush()
		fh = open('/dev/null', 'w')
		subprocess.call(['ssaha2'], stdout=fh)
		fh.close()
		print('ok.')
	except:
		print('nope?	Uh	oh	...\n\n')
		raise RuntimeError('Could	not	launch	ssaha2.	Have	you	installed	it?	Is	it	in	your	path?')
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 8, 25, '\t\tprint(definition, file=sys.stderr)\n')))
def head_from_fun(fun, bound=False, debug=False):
	if ((not inspect.isfunction(fun)) and hasattr(fun, u'__call__')):
		(name, fun) = (fun.__class__.__name__, fun.__call__)
	else:
		name = fun.__name__
	definition = FUNHEAD_TEMPLATE.format(fun_name=name, fun_args=_argsfromspec(getfullargspec(fun)), fun_value=1)
	if debug:
		print(definition, file=sys.stderr)
	namespace = {u'__name__': fun.__module__}
	exec definition in namespace
	result = namespace[name]
	result._source = definition
	if bound:
		return partial(result, object())
	return result
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 11, 135, "\t\t\t\t\tprint(('-' * state['indent']), frame.f_code.co_filename.replace(bbbase, ''), frame.f_code.co_name, frame.f_code.co_varnames, file=f)\n")))
def enable_trace(case, trace_exclusions=None, f=sys.stdout):
	if (trace_exclusions is None):
		trace_exclusions = ['twisted', 'worker_transition.py', 'util/tu', 'log.py', '/mq/', '/db/', 'buildbot/data/', 'fake/reactor.py']
	bbbase = os.path.dirname(buildbot.__file__)
	state = {'indent': 0}
	def tracefunc(frame, event, arg):
		if frame.f_code.co_filename.startswith(bbbase):
			if (not any(((te in frame.f_code.co_filename) for te in trace_exclusions))):
				if (event == 'call'):
					state['indent'] += 2
					print(('-' * state['indent']), frame.f_code.co_filename.replace(bbbase, ''), frame.f_code.co_name, frame.f_code.co_varnames, file=f)
				if (event == 'return'):
					state['indent'] -= 2
		return tracefunc
	sys.settrace(tracefunc)
	case.addCleanup(sys.settrace, (lambda _a, _b, _c: None))
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 5, 53, "\t\tprint(('debug_counter\t[%s]:\t%s' % (name, n)), file=sys.stderr)\n")))
def debug_counter(name, every=1):
	setattr(debug_counter, name, (getattr(debug_counter, name, 0) + 1))
	n = getattr(debug_counter, name)
	if ((n % every) == 0):
		print(('debug_counter	[%s]:	%s' % (name, n)), file=sys.stderr)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
('Exception: ', SyntaxError('invalid syntax', ('<unknown>', 4, 13, '\t\tprint(file=sys.stderr, *args)\n')))
def debug(*args):
	from sympy import SYMPY_DEBUG
	if SYMPY_DEBUG:
		print(file=sys.stderr, *args)
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too long
Too lo